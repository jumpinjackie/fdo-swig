// FdoMarshal.i
//
// This defines helper collection classes and typemaps to "box" methods in FDO
// that are not easy to wrap in their existing forms.
//
%include "../Common/BasicValueCollection.h"
%template (FdoClassTypeCollectionBase) FdoBasicValueCollection<FdoClassType>;
%include "../Common/ClassTypeCollection.h"
%template (FdoConditionTypeCollectionBase) FdoBasicValueCollection<FdoConditionType>;
%include "../Common/ConditionTypeCollection.h"
%template (FdoDataTypeCollectionBase) FdoBasicValueCollection<FdoDataType>;
%include "../Common/DataTypeCollection.h"
%template (FdoDistanceOperationsCollectionBase) FdoBasicValueCollection<FdoDistanceOperations>;
%include "../Common/DistanceOperationsCollection.h"
%template (FdoExpressionTypeCollectionBase) FdoBasicValueCollection<FdoExpressionType>;
%include "../Common/ExpressionTypeCollection.h"
%template (FdoGeometryComponentTypeCollectionBase) FdoBasicValueCollection<FdoGeometryComponentType>;
%include "../Common/GeometryComponentTypeCollection.h"
%template (FdoGeometryTypeCollectionBase) FdoBasicValueCollection<FdoGeometryType>;
%include "../Common/GeometryTypeCollection.h"
%template (FdoInt32CollectionBase) FdoBasicValueCollection<FdoInt32>;
%include "../Common/Int32Collection.h"
%template (FdoLockTypeCollectionBase) FdoBasicValueCollection<FdoLockType>;
%include "../Common/LockTypeCollection.h"
%template (FdoSpatialOperationsCollectionBase) FdoBasicValueCollection<FdoSpatialOperations>;
%include "../Common/SpatialOperationsCollection.h"
%template (FdoSpatialContextExtentTypeCollectionBase) FdoBasicValueCollection<FdoSpatialContextExtentType>;
%include "../Common/SpatialContextExtentTypeCollection.h"

%extend FdoISchemaCapabilities
{
    FdoClassTypeCollection* SupportedClassTypes()
    {
        FdoInt32 count = 0;
        FdoClassType* types = $self->GetClassTypes(count);
        FdoPtr<FdoClassTypeCollection> ret = FdoClassTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoDataTypeCollection* SupportedDataTypes()
    {
        FdoInt32 count = 0;
        FdoDataType* types = $self->GetDataTypes(count);
        FdoPtr<FdoDataTypeCollection> ret = FdoDataTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoDataTypeCollection* SupportedAutogeneratedDataTypes()
    {
        FdoInt32 count = 0;
        FdoDataType* types = $self->GetSupportedAutoGeneratedTypes(count);
        FdoPtr<FdoDataTypeCollection> ret = FdoDataTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoDataTypeCollection* SupportedIdentityPropertyTypes()
    {
        FdoInt32 count = 0;
        FdoDataType* types = $self->GetSupportedIdentityPropertyTypes(count);
        FdoPtr<FdoDataTypeCollection> ret = FdoDataTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};

%extend FdoIFilterCapabilities
{
    FdoConditionTypeCollection* SupportedConditionTypes()
    {
        FdoInt32 count = 0;
        FdoConditionType* types = $self->GetConditionTypes(count);
        FdoPtr<FdoConditionTypeCollection> ret = FdoConditionTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoSpatialOperationsCollection* SupportedSpatialOperations()
    {
        FdoInt32 count = 0;
        FdoSpatialOperations* types = $self->GetSpatialOperations(count);
        FdoPtr<FdoSpatialOperationsCollection> ret = FdoSpatialOperationsCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoDistanceOperationsCollection* SupportedDistanceOperations()
    {
        FdoInt32 count = 0;
        FdoDistanceOperations* types = $self->GetDistanceOperations(count);
        FdoPtr<FdoDistanceOperationsCollection> ret = FdoDistanceOperationsCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};

%extend FdoIExpressionCapabilities
{
    FdoExpressionTypeCollection* SupportedExpressionTypes()
    {
        FdoInt32 count = 0;
        FdoExpressionType* types = $self->GetExpressionTypes(count);
        FdoPtr<FdoExpressionTypeCollection> ret = FdoExpressionTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};

%extend FdoIGeometryCapabilities
{
    FdoGeometryComponentTypeCollection* SupportedGeometryComponentTypes()
    {
        FdoInt32 count = 0;
        FdoGeometryComponentType* types = $self->GetGeometryComponentTypes(count);
        FdoPtr<FdoGeometryComponentTypeCollection> ret = FdoGeometryComponentTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoGeometryTypeCollection* SupportedGeometryTypes()
    {
        FdoInt32 count = 0;
        FdoGeometryType* types = $self->GetGeometryTypes(count);
        FdoPtr<FdoGeometryTypeCollection> ret = FdoGeometryTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};

%extend FdoIConnectionCapabilities
{
    FdoLockTypeCollection* SupportedLockTypes()
    {
        FdoInt32 count = 0;
        FdoLockType* types = $self->GetLockTypes(count);
        FdoPtr<FdoLockTypeCollection> ret = FdoLockTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
    
    FdoSpatialContextExtentTypeCollection* SupportedSpatialContextExtentTypes()
    {
        FdoInt32 count = 0;
        FdoSpatialContextExtentType* types = $self->GetSpatialContextTypes(count);
        FdoPtr<FdoSpatialContextExtentTypeCollection> ret = FdoSpatialContextExtentTypeCollection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};

%extend FdoICommandCapabilities
{
    FdoInt32Collection* SupportedCommands()
    {
        FdoInt32 count = 0;
        FdoInt32* types = $self->GetCommands(count);
        FdoPtr<FdoInt32Collection> ret = FdoInt32Collection::Create();
        for (FdoInt32 i = 0; i < count; i++)
        {
            ret->Add(types[i]);
        }
        return ret.Detach();
    }
};