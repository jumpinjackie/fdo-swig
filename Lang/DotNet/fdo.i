%module FdoDotNet

%include "wchar.i"
%include <csharp.swg>

//
//SWIG is ref-counting aware, so let's take advantage of it!
//

//Do not AddRef() as any pointer returned will either already be AddRef()'d at the C++ level or
//(if freshly allocated) will start off with a refcount of 1
%feature("ref") FdoIDisposable ""
//However, we still do need to release
%feature("unref") FdoIDisposable "FDO_SAFE_RELEASE($this);"
%newobject *::Create;

//======= C#-specific ==========
//Need to override Dispose() for proxy classes derived from FdoIDisposable
%typemap(csdestruct_derived, methodname="Dispose", methodmodifiers="public") SWIGTYPE {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          //Anything derived from FdoIDisposable can simply chain up to the parent Dispose()
          //where it will be properly de-referenced', otherwise call the SWIG generated
          //free function
          //
          //HACK: This should not be a runtime check, it should be a check we should ideally do from SWIG
          if (!typeof(FdoIDisposable).IsAssignableFrom(this.GetType())) {
            $imcall;
          }
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

//Make all classes partial, so we can customize said classes outside of swig
%typemap(csclassmodifiers) SWIGTYPE "public partial class"

typedef unsigned char FdoByte;
typedef short         FdoInt8;
typedef short         FdoInt16;
typedef int           FdoInt32;
typedef long long     FdoInt64;

%include "arrays_csharp.i"
%apply unsigned char INOUT[] { unsigned char* buffer }
%apply unsigned char INOUT[] { unsigned char* data }
%apply unsigned char INOUT[] { unsigned char* bytes }
%apply unsigned char INOUT[] { unsigned char* byteArray }
%apply unsigned char INOUT[] { unsigned char* value }

%include "DotNetPolymorphism.i"

%{
#include <vector>
#include "Fdo.h"

//FDO helper collections. Not in official FDO API
#include "BasicValueCollection.h"
#include "ClassTypeCollection.h"
#include "ConditionTypeCollection.h"
#include "DataTypeCollection.h"
#include "DistanceOperationsCollection.h"
#include "ExpressionTypeCollection.h"
#include "GeometryComponentTypeCollection.h"
#include "GeometryTypeCollection.h"
#include "Int32Collection.h"
#include "DoubleCollection.h"
#include "LockTypeCollection.h"
#include "SpatialOperationsCollection.h"
#include "SpatialContextExtentTypeCollection.h"

static std::string W2A_SLOW(const wchar_t* input)
{
    size_t wlen = wcslen(input);
    int mbslen = (int) wlen * 4 + 1;
    char* mbs = (char*)alloca(mbslen);
    wcstombs(mbs, input, mbslen);
    return std::string(mbs);
}

%}

%include "FdoCollections.i"
%include "FdoExceptions.i"
%include "../Common/FdoIgnore.i"

// These methods have been replaced with a more usable version for the languages 
// we want to expose in FdoMarshal.i below, so hide these original methods
//
// We're not putting these directives in FdoIgnore.i because we want to note that
// these ignores are due to replacements in FdoMarshal.i and not for general reasons
//
%ignore FdoISchemaCapabilities::GetClassTypes;
%ignore FdoISchemaCapabilities::GetDataTypes;
%ignore FdoISchemaCapabilities::GetSupportedAutoGeneratedTypes;
%ignore FdoISchemaCapabilities::GetSupportedIdentityPropertyTypes;
%ignore FdoIFilterCapabilities::GetConditionTypes;
%ignore FdoIFilterCapabilities::GetSpatialOperations;
%ignore FdoIFilterCapabilities::GetDistanceOperations;
%ignore FdoIExpressionCapabilities::GetExpressionTypes;
%ignore FdoIGeometryCapabilities::GetGeometryComponentTypes;
%ignore FdoIGeometryCapabilities::GetGeometryTypes;
%ignore FdoIConnectionCapabilities::GetLockTypes;
%ignore FdoIConnectionCapabilities::GetSpatialContextTypes;
%ignore FdoICommandCapabilities::GetCommands;
%ignore FdoClassCapabilities::GetLockTypes;
%ignore FdoClassCapabilities::SetLockTypes;
%ignore FdoStringCollection::Add(FdoStringP);
%ignore FdoStringCollection::Create(const FdoStringP&, FdoString*);
%ignore FdoStringCollection::Create(const FdoStringP&, FdoString*, bool);
%ignore FdoProviderNameTokens::GetNameTokens() const;
%ignore FdoProviderNameTokens::GetVersionTokens() const;
%ignore FdoProviderNameTokens::GetLocalName() const;
%ignore FdoStringCollection::IndexOf(FdoStringP) const;
%ignore FdoStringCollection::IndexOf(FdoStringP, FdoBoolean) const;
%ignore FdoStringCollection::ToString();
%ignore FdoStringCollection::ToString(FdoString*);
%ignore FdoIPropertyDictionary::EnumeratePropertyValues(FdoString*, FdoInt32&);
%ignore FdoIPropertyDictionary::GetPropertyNames(FdoInt32&);
%ignore FdoIdentifier::GetScope(FdoInt32&);
%ignore FdoSchemaAttributeDictionary::GetAttributeNames(FdoInt32&);
%ignore FdoXmlReader::DecodeName(FdoStringP);
%ignore FdoXmlWriter::EncodeName(FdoStringP);
%ignore FdoXmlWriter::IsValidName(FdoStringP);
%ignore FdoXmlWriter::UriToQName(FdoString*, FdoString*);
%ignore FdoXmlWriter::UriToQName(FdoString*, FdoString*, FdoBoolean);
%ignore FdoXmlAttribute::GetLocalName();
%ignore FdoXmlAttribute::GetLocalValue();
%ignore FdoXmlAttribute::GetPrefix();
%ignore FdoXmlAttribute::GetQName();
%ignore FdoXmlAttribute::GetUri();
%ignore FdoXmlAttribute::GetValuePrefix();
%ignore FdoXmlAttribute::GetValueUri();
%ignore FdoClassDefinition::GetQualifiedName();
%ignore FdoPhysicalElementMapping::GetQualifiedName();
%ignore FdoPropertyDefinition::GetQualifiedName();
%ignore FdoSchemaElement::GetQualifiedName();
%ignore FdoStringElement::GetString();

%ignore FdoGml212;
%ignore FdoGml311;
%ignore FdoXml;

%include "../Common/FdoIncludes.i"
%include "../Common/FdoMarshal.i"